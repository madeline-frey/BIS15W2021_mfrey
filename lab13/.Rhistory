})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("fill", "Select Fill", choices = c("trophic.guild", "thermoregulation"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(homerange, aes(x = locomotion, fill=input$fill)) + geom_bar() + theme_light()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("fill", "Select Fill", choices = c("trophic.guild", "thermoregulation"))
plotOutput("plot", width = "500px", height = "400px")
ui <- fluidPage(
selectInput("fill", "Select Fill", choices = c("trophic.guild", "thermoregulation")),
plotOutput("plot", width = "500px", height = "400px")
server <- function(input, output) {
ui <- fluidPage(
selectInput("fill", "Select Fill", choices = c("trophic.guild", "thermoregulation")),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(homerange, aes(x = locomotion, fill=input$fill)) + geom_bar() + theme_light()
})
#not sure what I am doing wrong here...
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("fill", "Select Fill", choices = c("trophic.guild", "thermoregulation"), selected= "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(homerange, aes(x = locomotion, fill=input$fill)) + geom_bar() + theme_light()
})
#not sure what I am doing wrong here...
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("fill", "Select Fill", choices = c("trophic.guild", "thermoregulation"), selected= "trophic.guild"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(homerange, aes(x = locomotion, fill=input$fill)) + geom_col() + theme_light()
})
#not sure what I am doing wrong here...
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point() + theme_light()
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(
plotOutput("plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Penguins Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
gabon <- readr::read_csv("data/IvindoData_DryadVersion.csv")
names(gabon)
glimpse(gabon)
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages('tidyverse')
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv")
uc_admit <- readr::read_csv("data/UC_admit.csv")
names(uc_admit)
janitor::clean_names(uc_admit)
summary(uc_admit)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(naniar)
naniar::miss_var_summary(uc_admit)
uc_admit <- janitor::clean_names(uc_admit)
summary(uc_admit)
naniar::miss_var_summary(uc_admit)
glimpse(uc_admit)
uc_admit$campus <- as.factor(uc_admit$campus)
uc_admit$campus <- as.factor(uc_admit$campus)
uc_admit$year <- as.factor(uc_admit$year)
uc_admit$campus <- as.factor(uc_admit$campus)
uc_admit$year <- as.factor(uc_admit$year)
uc_admit$year <- as.factor(uc_admit$year)
uc_admit
uc_admit$year <- as.factor(uc_admit$year)
uc_admit$academic_yr <- as.factor(uc_admit$academic_yr)
uc_admit$campus <- as.factor(uc_admit$campus)
uc_admit$academic_yr <- as.factor(uc_admit$academic_yr)
uc_admit$perc_fr <- as.double(uc_admit$perc_fr)
uc_admit
uc_admit_perc <- uc_admit %>%
mutate(perc_real=perc_fr, %.rm=T)
uc_admit_perc <- uc_admit %>%
separate(perc_fr, into= c("perc_real", "symbol"), sep = "%")
uc_admit_perc <- uc_admit %>%
separate(perc_fr, into= c("perc_real", "symbol"), sep = "%")
uc_admit_perc
uc_admit_perc <- uc_admit %>%
str_replace_all(perc_fr, "%", "")
uc_admit_perc <- uc_admit %>%
str_replace_all(perc_fr, "%")
uc_admit_perc <- uc_admit %>%
gsub("%", "", uc_admit)
uc_admit_perc <- uc_admit %>%
gsub("%", "", perc_fr)
uc_admit_perc <- uc_admit %>%
str_replace_all(uc_admit, "%")
uc_admit_perc <- uc_admit %>%
gsub("%", "0", uc_admit)
gsub("%", "0", uc_admit)
uc_admit_perc <- uc_admit %>%
str_remove("%", perc_fr)
uc_admit_perc <- uc_admit %>%
str_remove("%", uc_admit)
uc_admit_perc <- uc_admit %>%
str_remove("%", uc_admit$perc_fr)
str_remove("%", uc_admit$perc_fr)
str_remove("%", uc_admit$perc_fr)
uc_admit_perc <- uc_admit %>%
str_remove(uc_admit, "%")
uc_admit_perc <- uc_admit %>%
str_remove(uc_admit$perc_fr, "%")
uc_admit_perc <- uc_admit %>%
str_remove(perc_fr, "%")
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),# what does hr mean?
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admits By Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Variable", choices = c("campus", "academic_yr", "category"),
selected = "campus"),
hr(),# what does hr mean?
helpText("From the University of California Information Center")
), # close the first box
box(title = "Admittance", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit %>%
ggplot(aes_string(x = input$x, y = filtered_count_fr, color= ethnicity)) +
geom_col(position="fill")+
theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admits By Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Variable", choices = c("campus", "academic_yr", "category"),
selected = "campus"),
hr(),# what does hr mean?
helpText("From the University of California Information Center")
), # close the first box
box(title = "Admittance", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit %>%
ggplot(aes_string(x = input$x, y = filtered_count_fr, fill= ethnicity)) +
geom_col(position="fill")+
theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admits By Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Variable", choices = c("campus", "academic_yr", "category"),
selected = "campus"),
hr(),# what does hr mean?
helpText("From the University of California Information Center")
), # close the first box
box(title = "Admittance", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit %>%
ggplot(aes_string(x = input$x, y = "filtered_count_fr", "fill= ethnicity")) +
geom_col(position="fill")+
theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admits By Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Variable", choices = c("campus", "academic_yr", "category"),
selected = "campus"),
hr(),# what does hr mean?
helpText("From the University of California Information Center")
), # close the first box
box(title = "Admittance", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit %>%
ggplot(aes_string(x = input$x, y = "filtered_count_fr", "fill= ethnicity")) +
geom_col(position="fill")+
scale_color_brewer("Set1")+
theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admits By Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Variable", choices = c("campus", "academic_yr", "category"),
selected = "campus"),
hr(),# what does hr mean?
helpText("From the University of California Information Center")
), # close the first box
box(title = "Admittance", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit %>%
ggplot(aes_string(x = input$x, y = "filtered_count_fr", "fill= ethnicity")) +
geom_col(position="dodge")+
scale_color_brewer("Set1")+
theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admits By Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Variable", choices = c("campus", "academic_yr", "category"),
selected = "campus"),
hr(),# what does hr mean?
helpText("From the University of California Information Center")
), # close the first box
box(title = "Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit %>%
ggplot(aes_string(x = input$x, y = "filtered_count_fr", "fill= ethnicity")) +
geom_col(position="dodge")+
scale_color_brewer("Set1")+
theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admits By Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Variable", choices = c("campus", "academic_yr", "category"),
selected = "campus"),
hr(),# what does hr mean?
helpText("From the University of California Information Center")
), # close the first box
box(title = "Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit %>%
ggplot(aes_string(x = input$x, y = "filtered_count_fr", "fill= ethnicity")) +
geom_col()+
scale_fill(palette= "Set1")+
theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admits By Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Variable", choices = c("campus", "academic_yr", "category"),
selected = "campus"),
hr(),# what does hr mean?
helpText("From the University of California Information Center")
), # close the first box
box(title = "Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit %>%
ggplot(aes_string(x = input$x, y = "filtered_count_fr", "fill= ethnicity")) +
geom_col()+
scale_color_brewer(palette= "Set1")+
theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin="red",
dashboardHeader(title = "UC Enrollment"),
dashboardSidebar(disable = F),
dashboardBody(selectInput("campus", " Select Campus:",
choices=unique(uc_admit$campus)),
fluidRow(
box(title = "Plot Options", width = 4,
selectInput("x", "Student/Applicant Details", choices = c("ethnicity", "category"),
selected = "campus"),
hr(),
helpText("Source: (https://www.universityofcalifornia.edu/infocenter). Admissions data were collected for the years 2010-2019 for each UC campus.")
),
box(title = "Academic Year", width = 6,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit %>%
filter(campus == input$campus) %>%
ggplot(aes_string(x = "academic_yr", y="filtered_count_fr",fill = input$x)) +
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set1")+
theme_light(base_size = 18)+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(title = "UC Admission Information",x=NULL,y="Number of Admittees")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admits By Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Variable", choices = c("campus", "academic_yr", "category"),
selected = "campus"),
hr(),# what does hr mean?
helpText("From the University of California Information Center")
), # close the first box
box(title = "Ethnicity", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
uc_admit %>%
ggplot(aes_string(x = input$x, y = "filtered_count_fr", fill= "ethnicity")) +
geom_col(position= "dodge")+
scale_color_brewer(palette= "Set1")+
theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
# I don't know why the fill command isn't working. Need help.
